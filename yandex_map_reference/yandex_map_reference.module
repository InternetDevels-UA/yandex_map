<?php

/**
 * @file
 * Provides referencable fields for other entities
 */

/**
 * Implements hook_field_info().
 */
function yandex_map_reference_field_info() {
  return array(
    'yandex_map_reference' => array(
      'label'             => t('Map reference'),
      'description'       => t('This field stores the ID of a related map as an integer value.'),
      'settings'          => array(
        'view' => array(
          'view_name' => '',
          'display_name' => '',
          'args' => array(),
        ),
      ),
      'default_widget'    => 'yandex_map_reference_embedded',
      'default_formatter' => 'yandex_map_reference_map',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function yandex_map_reference_field_schema($field) {
  $columns = array(
    'mid' => array(
      'type'     => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
    ),
  );
  return array(
    'columns' => $columns,
    'indexes' => array('mid' => array('mid')),
    'foreign keys' => array(
      'mid' => array(
        'table' => 'yandex_map',
        'columns' => array('mid' => 'mid'),
      ),
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function yandex_map_reference_field_is_empty($item, $field) {
  // mid = 0 is empty too, which is exactly what we want.
  return empty($item['mid']);
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'invalid_mid': mid is not valid for the field (not a valid map id, or the map is not referenceable).
 */
function yandex_map_reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  if ($instance['widget']['type'] == 'yandex_map_reference_embedded') {
    return;
  }
}

/**
 * Implements hook_field_widget_info().
 */
function yandex_map_reference_field_widget_info() {
  return array(
    'yandex_map_reference_embedded' => array(
      'label'       => t('Embedded Map'),
      'description' => t('Display Map on entity creation'),
      'field types' => array('yandex_map_reference'),
      'settings'    => array(
        'save_empty' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function yandex_map_reference_field_widget_settings_form($field, $instance) {
  $widget   = $instance['widget'];
  $defaults = field_info_widget_settings($widget['type']);
  $settings = array_merge($defaults, $widget['settings']);

  $form = array();
  switch ($widget['type']) {
    case 'yandex_map_reference_embedded':
      $form['save_empty'] = array(
        '#type' => 'checkbox',
        '#title' => t('Save maps without markers'),
        '#default_value' => $settings['save_empty'],
        '#description' => t('Allows to save empty maps without any geoobject.'),
      );
      break;

  }
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function yandex_map_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'yandex_map_reference_embedded':
      if (!empty($items[$delta]['mid'])) {
        if (is_numeric($items[$delta]['mid'])) {
          $map = yandex_map_load($items[$delta]['mid']);
        }
        else {
          $map = yandex_map_json_decode($items[$delta]['mid']['settings'], $items[$delta]['mid']['yandex_map']);
        }
      }
      else {
        $map = entity_get_controller('yandex_map')->create();
      }
      $element['mid'] = _yandex_map_form($map, 'reference');
      $element['mid']['title']['#access'] = FALSE;
      $element['mid']['block']['#access'] = FALSE;
      break;

  }
  return $element;
}


/**
 * Implements hook_field_presave().
 */
function yandex_map_reference_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $widget = $instance['widget'];
  if ($widget['type'] == 'yandex_map_reference_embedded') {
    foreach ($items as $delta => $item) {
      $map = yandex_map_json_decode($item['mid']['settings'], $item['mid']['yandex_map']);
      if (empty($widget['settings']['save_empty']) && empty($map->geoobjects)) {
        $items[$delta]['mid'] = 0;
        continue;
      }
      $map->title = entity_label($entity_type, $entity);
      $map = yandex_map_save($map);
      $items[$delta]['mid'] = $map->mid;
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function yandex_map_reference_field_formatter_info() {
  return array(
    'yandex_map_reference_map' => array(
      'label'       => t('Yandex Map'),
      'description' => t('Display the referenced map.'),
      'field types' => array('yandex_map_reference'),
      'settings'    => array('yandex_map_reference_view_mode' => 'default'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function yandex_map_reference_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
    case 'yandex_map_reference_map':
      $entity_info = entity_get_info('yandex_map');
      $modes       = $entity_info['view modes'];
      $options     = array();
      foreach ($modes as $name => $mode) {
        $options[$name] = $mode['label'];
      }
      $element['yandex_map_reference_view_mode'] = array(
        '#title'         => t('View mode'),
        '#type'          => 'select',
        '#options'       => $options,
        '#default_value' => $settings['yandex_map_reference_view_mode'],
        // Never empty, so no #empty_option
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function yandex_map_reference_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display  = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary  = array();
  switch ($display['type']) {
    case 'yandex_map_reference_map':
      $entity_info = entity_get_info('yandex_map');
      $modes = $entity_info['view modes'];
      $mode = $modes[$settings['yandex_map_reference_view_mode']]['label'];
      $summary[] = t('View mode: %mode', array('%mode' => $mode));
      break;
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function yandex_map_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'yandex_map_reference_map':
      static $recursion = 0;
      $recursion++;
      if ($recursion > 20) {
        return array();
      }
      foreach ($items as $delta => $item) {
        if (!empty($item['mid'])) {
          if (is_numeric($item['mid'])) {
            $map = yandex_map_load($item['mid']);
          }
          // We have full map object on node preview.
          elseif (is_array($item['mid']) && !empty($item['mid']['yandex_map']->mid)) {
            $map = $item['mid']['yandex_map'];
          }
          else {
            $map = entity_get_controller('yandex_map')->create();
          }
          $result[$delta] = yandex_map_view($map, $settings['yandex_map_reference_view_mode']);
        }
      }
      break;

  }
  return $result;
}
