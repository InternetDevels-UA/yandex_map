<?php

/**
 * @file
 * Test file for Yandex Map module
 */
//class YandexMapsBasicTest extends DrupalWebTestCase {
//  
//  public static function getInfo() {
//    return array(
//      'name' => t('Yandex Maps basic test'),
//      'description' => t('Test basic functionality of Yandex Maps module.'),
//      'group' => 'Yandex Maps',
//    );
//  }
//  
//  function setUp() {
//    parent::setUp('yandex_map');
//
//    $permissions = array(
//      'access administration pages',
//      'create yandex_map entities',
//    );
//
//    // User to set up google_analytics.
//    $this->admin_user = $this->drupalCreateUser($permissions);
//    $this->drupalLogin($this->admin_user);
//  }
//  
//  function testYandexMapsEntityList() {
//    // Check for Yandex Maps Entyties list.
//    $this->drupalGet('admin/structure/yandex-map');
//    $this->assertRaw(t('Add Yandex map'), '[testYandexMapsEntity]: List page displayed.');
//  }
//  
//  function testYandexMapsEntityCreate() {
//    $this->drupalGet('admin/structure/yandex-map/create');
//    $edit = array(
//      'title' => $this->randomName(),
//      'zoom' => $this->randomName(),
//      'center_coordinates' => $this->randomName(),
//      'field_map_point' => array(
//        'description' => $this->randomName(),
//        'color'       => $this->randomName(),
//        'number'      => rand(0, 10),
//        'marker'      => rand(0, 10),
//        'longitude'   => rand(0, 10),
//        'latitude'    => rand(0, 10),
//      ),
//    );
//    $this->drupalPost('admin/structure/yandex-map/create', $edit, 'Save');
//  }
//}


class YandexMapsEditTestCase extends DrupalWebTestCase {
  protected $web_user;
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'Map edit',
      'description' => 'Create a map and test map edit functionality.',
      'group' => 'Yandex Map',
    );
  }

  function setUp() {
    parent::setUp('yandex_map');

    $this->web_user = $this->drupalCreateUser(array('create yandex_map entities', 'edit own yandex_map entity'));
    $this->admin_user = $this->drupalCreateUser(array('edit any yandex_map entity', 'administer yandex_map'));
  }

  /**
   * Check node edit functionality.
   */
  function testMapEdit() {
    $this->drupalLogin($this->web_user);

    $langcode = LANGUAGE_NONE;
    // Create map to edit.
    
    $edit = array(
      'title'                                      => $this->randomName(8),
      'zoom'                                       => rand(0, 10),
      'center_coordinates'                         => $this->randomName(16),
      "field_map_point[$langcode][0][description]" => $this->randomName(16),
      "field_map_point[$langcode][0][color]"       => $this->randomName(8),
      "field_map_point[$langcode][0][number]"      => rand(0, 10),
      "field_map_point[$langcode][0][marker]"      => rand(0, 10),
      "field_map_point[$langcode][0][longitude]"   => rand(0, 10),
      "field_map_point[$langcode][0][latitude]"    => rand(0, 10),
    );

    $this->drupalPost('admin/structure/yandex-map/create', $edit, t('Save'));

    // Check that the map exists in the database.
    $map = yandex_map_load_multiple(array(), array('title' => $edit['title']));
    $this->assertTrue($map, t('Map found in database.'));

    // Check that "edit" link points to correct page.
    $this->clickLink(t('Edit'));
    $edit_url = url("yandex-map/$map->mid/edit", array('absolute' => TRUE));
    $actual_url = $this->getURL();
    $this->assertEqual($edit_url, $actual_url, t('On edit page.'));

    // Check that the title and body fields are displayed with the correct values.
    $active = '<span class="element-invisible">' . t('(active tab)') . '</span>';
    $link_text = t('!local-task-title!active', array('!local-task-title' => t('Edit'), '!active' => $active));
    $this->assertText(strip_tags($link_text), 0, t('Edit tab found and marked active.'));
    //$this->assertFieldByName('title', $edit['title'], t('Title field displayed.'));
    //$this->assertFieldByName($body_key, $edit[$body_key], t('Body field displayed.'));

    // Edit the content of the map.
    $edit = array(
      'title'                                      => $this->randomName(8),
      'zoom'                                       => rand(0, 10),
      'center_coordinates'                         => $this->randomName(16),
      "field_map_point[$langcode][0][description]" => $this->randomName(16),
      "field_map_point[$langcode][0][color]"       => $this->randomName(8),
      "field_map_point[$langcode][0][number]"      => rand(0, 10),
      "field_map_point[$langcode][0][marker]"      => rand(0, 10),
      "field_map_point[$langcode][0][longitude]"   => rand(0, 10),
      "field_map_point[$langcode][0][latitude]"    => rand(0, 10),
    );
    // Stay on the current page, without reloading.
    $this->drupalPost(NULL, $edit, t('Save'));

    // Check that the title and body fields are displayed with the updated values.
    //$this->assertText($edit[$title_key], t('Title displayed.'));
    //$this->assertText($edit[$body_key], t('Body displayed.'));

    // Login as a second administrator user.
    $second_web_user = $this->drupalCreateUser(array('administer yandex_map', 'edit any yandex_map entity'));
    $this->drupalLogin($second_web_user);
    // Edit the same node, creating a new revision.
    $this->drupalGet("yandex-map/$map->mid/edit");
    $edit = array(
      'title'                                      => $this->randomName(8),
      'zoom'                                       => rand(0, 10),
      'center_coordinates'                         => $this->randomName(16),
      "field_map_point[$langcode][0][description]" => $this->randomName(16),
      "field_map_point[$langcode][0][color]"       => $this->randomName(8),
      "field_map_point[$langcode][0][number]"      => rand(0, 10),
      "field_map_point[$langcode][0][marker]"      => rand(0, 10),
      "field_map_point[$langcode][0][longitude]"   => rand(0, 10),
      "field_map_point[$langcode][0][latitude]"    => rand(0, 10),
    );
    $this->drupalPost(NULL, $edit, t('Save'));

    // Ensure that the node revision has been created.
    $updated_map = yandex_map_load_multiple(array(), array('title' => $edit['title']));;
    //$this->assertNotIdentical($node->vid, $revised_node->vid, 'A new revision has been created.');
    // Ensure that the node author is preserved when it was not changed in the
    // edit form.
    $this->assertIdentical($map->uid, $updated_map->uid, 'The map author has been preserved.');
    // Ensure that the revision authors are different since the revisions were
    // made by different users.
    //$first_node_version = node_load($node->nid, $node->vid);
    //$second_node_version = node_load($node->nid, $revised_node->vid);
    //$this->assertNotIdentical($first_node_version->revision_uid, $second_node_version->revision_uid, 'Each revision has a distinct user.');
  }

  ///**
  // * Check changing node authored by fields.
  // */
  //function testPageAuthoredBy() {
  //  $this->drupalLogin($this->admin_user);
  //
  //  // Create node to edit.
  //  $langcode = LANGUAGE_NONE;
  //  $body_key = "body[$langcode][0][value]";
  //  $edit = array();
  //  $edit['title'] = $this->randomName(8);
  //  $edit[$body_key] = $this->randomName(16);
  //  $this->drupalPost('node/add/page', $edit, t('Save'));
  //
  //  // Check that the node was authored by the currently logged in user.
  //  $node = $this->drupalGetNodeByTitle($edit['title']);
  //  $this->assertIdentical($node->uid, $this->admin_user->uid, 'Node authored by admin user.');
  //
  //  // Try to change the 'authored by' field to an invalid user name.
  //  $edit = array(
  //    'name' => 'invalid-name',
  //  );
  //  $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
  //  $this->assertText('The username invalid-name does not exist.');
  //
  //  // Change the authored by field to an empty string, which should assign
  //  // authorship to the anonymous user (uid 0).
  //  $edit['name'] = '';
  //  $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
  //  $node = node_load($node->nid, NULL, TRUE);
  //  $this->assertIdentical($node->uid, '0', 'Node authored by anonymous user.');
  //
  //  // Change the authored by field to another user's name (that is not
  //  // logged in).
  //  $edit['name'] = $this->web_user->name;
  //  $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
  //  $node = node_load($node->nid, NULL, TRUE);
  //  $this->assertIdentical($node->uid, $this->web_user->uid, 'Node authored by normal user.');
  //
  //  // Check that normal users cannot change the authored by information.
  //  $this->drupalLogin($this->web_user);
  //  $this->drupalGet('node/' . $node->nid . '/edit');
  //  $this->assertNoFieldByName('name');
  //}
}